name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Ruff linter
        uses: astral-sh/ruff-action@v3
        with:
          args: check --output-format=github .

      - name: Run Ruff formatter check
        uses: astral-sh/ruff-action@v3
        with:
          args: format --check .

  type-check:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --locked --group typing

      - name: Run mypy
        run: uv run mypy httptap

  test:
    name: Test / Python ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "3.14"

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --locked --group test

      - name: Run tests with coverage
        run: uv run pytest --cov --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.14' && github.actor != 'dependabot[bot]'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: httptap-coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() && github.actor != 'dependabot[bot]' }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  pre-commit-config-check:
    name: Validate pre-commit config
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check for pre-commit config changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            precommit-config:
              - '.pre-commit-config.yaml'
              - 'pyproject.toml'
              - 'uv.lock'
              - '.github/workflows/pre-commit.yml'

      - name: Set up Python
        if: steps.changes.outputs.precommit-config == 'true'
        uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"

      - name: Install uv
        if: steps.changes.outputs.precommit-config == 'true'
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Sync only precommit dependencies
        if: steps.changes.outputs.precommit-config == 'true'
        run: |
          uv sync --group precommit
          uv run pre-commit --version

      - name: Validate pre-commit config
        if: steps.changes.outputs.precommit-config == 'true'
        run: |
          uv run pre-commit validate-config
          uv run pre-commit validate-manifest

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs:
      - lint
      - type-check
      - test
      - pre-commit-config-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Build package
        run: uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: dist
          path: dist/
          retention-days: 7
          compression-level: 6
          if-no-files-found: error

  all-checks-pass:
    name: All Checks Passed
    if: always()
    needs:
      - lint
      - type-check
      - test
      - pre-commit-config-check
      - build
    runs-on: ubuntu-latest

    steps:
      - name: Check all jobs
        run: |
          echo "lint: $LINT_RESULT"
          echo "type-check: $TYPE_CHECK_RESULT"
          echo "test: $TEST_RESULT"
          echo "pre-commit-config-check: $PRE_COMMIT_CONFIG_CHECK_RESULT"
          echo "build: $BUILD_RESULT"

          if [[ "$LINT_RESULT" != "success" ]] || \
             [[ "$TYPE_CHECK_RESULT" != "success" ]] || \
             [[ "$TEST_RESULT" != "success" ]] || \
             [[ "$PRE_COMMIT_CONFIG_CHECK_RESULT" != "success" ]] || \
             [[ "$BUILD_RESULT" != "success" ]]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed successfully!"
        env:
          LINT_RESULT: ${{ needs.lint.result }}
          TYPE_CHECK_RESULT: ${{ needs.type-check.result }}
          TEST_RESULT: ${{ needs.test.result }}
          PRE_COMMIT_CONFIG_CHECK_RESULT: ${{ needs.pre-commit-config-check.result }}
          BUILD_RESULT: ${{ needs.build.result }}
