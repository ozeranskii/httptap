{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"httptap","text":"<p><code>httptap</code> is a rich-powered CLI that dissects an HTTP request into every meaningful phase\u2014DNS, TCP connect, TLS handshake, server wait, and body transfer\u2014and renders the results as a timeline table, compact summary, or machine-friendly metrics. It is designed for interactive troubleshooting, regression analysis, and recording of performance baselines.</p> <p>Special Offer</p> <p> Save 50% on GitKraken Pro </p> <p>   Bundle GitKraken Client, GitLens for VS Code, and powerful CLI tools to accelerate every repo workflow. </p> <p>  Claim 50% Discount </p> <p>Exclusive for httptap community</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Phase-by-phase timing \u2013 precise measurements built from httpcore trace hooks (with sane fallbacks when metal-level   data is unavailable)</li> <li>IPv4/IPv6 aware \u2013 the resolver and TLS inspector report both the address and its family</li> <li>TLS insights \u2013 certificate CN, expiry countdown, cipher suite, and protocol version are captured automatically</li> <li>Multiple output modes \u2013 rich waterfall view, compact single-line summaries, or <code>--metrics-only</code> for scripting</li> <li>JSON export \u2013 persist full step data (including redirect chains) for later processing</li> <li>Extensible \u2013 clean Protocol interfaces for DNS, TLS, timing, visualization, and export so you can plug in custom   behavior</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>httptap https://httpbin.io\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#rich-waterfall-visualization","title":"Rich Waterfall Visualization","text":"<p>View detailed timing breakdown for each phase of the HTTP request with a beautiful terminal UI powered by Rich.</p>"},{"location":"#multiple-output-formats","title":"Multiple Output Formats","text":"<ul> <li>Rich mode (default): Beautiful waterfall table with colors and formatting</li> <li>Compact mode (<code>--compact</code>): Single-line summaries suitable for logs</li> <li>Metrics mode (<code>--metrics-only</code>): Raw metrics for scripting and automation</li> <li>JSON export (<code>--json</code>): Full request data including redirect chains</li> </ul>"},{"location":"#advanced-network-insights","title":"Advanced Network Insights","text":"<ul> <li>DNS resolution timing with IP family detection (IPv4/IPv6)</li> <li>TCP connection establishment timing</li> <li>TLS handshake analysis with certificate information</li> <li>Time to first byte (TTFB) measurement</li> <li>Response body transfer timing</li> </ul>"},{"location":"#redirect-chain-support","title":"Redirect Chain Support","text":"<p>Follow HTTP redirects and see timing breakdown for each step in the chain with <code>--follow</code> flag.</p>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li> <p> Installation</p> <p>Get started with httptap in seconds</p> </li> <li> <p> Quick Start</p> <p>Learn the basics with simple examples</p> </li> <li> <p> Usage Guide</p> <p>Explore all features and options</p> </li> <li> <p> API Reference</p> <p>Extend httptap with custom components</p> </li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.10-3.14</li> <li>macOS, Linux, or Windows</li> <li>No system dependencies beyond standard networking</li> </ul>"},{"location":"#license","title":"License","text":"<p>Apache License 2.0 \u00a9 Sergei Ozeranskii</p>"},{"location":"#connect","title":"Connect","text":"<p>Follow the author for insights from real-world experience:</p> <ul> <li> Telegram Channel - Development, DevOps, architecture, and security. Real experience and practical insights without fluff.</li> <li> GitHub - Open source projects and contributions</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Built on the shoulders of fantastic libraries:</p> <ul> <li>httpx - Modern HTTP client</li> <li>httpcore - Low-level HTTP protocol implementation</li> <li>Rich - Beautiful terminal formatting</li> </ul>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to httptap will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Initial release preparation</li> <li>Comprehensive documentation site</li> <li>MkDocs Material documentation</li> </ul>"},{"location":"about/changelog/#future-versions","title":"Future Versions","text":"<p>Changelogs for released versions will appear here automatically after the first release.</p> <p>For the complete and up-to-date changelog, see:</p> <ul> <li>CHANGELOG.md in repository</li> <li>GitHub Releases</li> </ul> <p>This page is updated automatically by the release workflow using git-cliff.</p>"},{"location":"about/license/","title":"License","text":"<p>httptap is licensed under the Apache License 2.0.</p>"},{"location":"about/license/#apache-license-20","title":"Apache License 2.0","text":"<pre><code>Copyright 2025 Sergei Ozeranskii\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"about/license/#what-this-means","title":"What This Means","text":"<p>The Apache License 2.0 is a permissive open-source license that allows you to:</p> <p>\u2705 Use - Use httptap for any purpose, commercial or non-commercial \u2705 Modify - Modify the source code to suit your needs \u2705 Distribute - Distribute original or modified versions \u2705 Sublicense - Grant rights to others under different terms \u2705 Commercial use - Use httptap in commercial products</p>"},{"location":"about/license/#your-responsibilities","title":"Your Responsibilities","text":"<p>When using httptap, you must:</p> <ul> <li>Include License - Include a copy of the Apache License 2.0</li> <li>State Changes - Document any modifications you make</li> <li>Include Notices - Preserve copyright and attribution notices</li> <li>Include NOTICE - Include the NOTICE file if present</li> </ul>"},{"location":"about/license/#patent-grant","title":"Patent Grant","text":"<p>The Apache License 2.0 includes an explicit patent license from contributors to users. This means:</p> <ul> <li>Contributors grant you a license to any patents they hold that are necessary to use httptap</li> <li>If you sue anyone over patent infringement related to httptap, your license terminates</li> </ul>"},{"location":"about/license/#no-warranty","title":"No Warranty","text":"<p>httptap is provided \"AS IS\" without warranties of any kind. See the full license text for details.</p>"},{"location":"about/license/#full-license-text","title":"Full License Text","text":"<p>For the complete license text, see:</p> <ul> <li>LICENSE file in repository</li> <li>Apache License 2.0 official text</li> </ul>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>httptap depends on several open-source projects:</p>"},{"location":"about/license/#direct-dependencies","title":"Direct Dependencies","text":"Package License Link httpx BSD-3-Clause https://github.com/encode/httpx httpcore BSD-3-Clause https://github.com/encode/httpcore Rich MIT https://github.com/Textualize/rich dnspython ISC https://github.com/rthalley/dnspython <p>All dependencies use permissive licenses compatible with Apache 2.0.</p>"},{"location":"about/license/#questions","title":"Questions","text":"<p>For licensing questions, please:</p> <ul> <li>Open an issue on GitHub</li> <li>Contact the maintainers</li> </ul> <p>This page provides a summary. The full license text is the authoritative source.</p>"},{"location":"api/core/","title":"Core Components","text":"<p>This page documents the core classes and functions in httptap.</p>"},{"location":"api/core/#httptapanalyzer","title":"HTTPTapAnalyzer","text":"<p>The main analyzer class that orchestrates HTTP request analysis.</p>"},{"location":"api/core/#constructor","title":"Constructor","text":"<pre><code>HTTPTapAnalyzer(\n    dns_resolver: DNSResolverProtocol | None = None,\n    tls_inspector: TLSInspectorProtocol | None = None,\n    timing_provider: TimingProviderProtocol | None = None\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>dns_resolver</code> - Custom DNS resolver implementation (optional)</li> <li><code>tls_inspector</code> - Custom TLS inspector implementation (optional)</li> <li><code>timing_provider</code> - Custom timing provider implementation (optional)</li> </ul> <p>If not provided, default implementations are used.</p>"},{"location":"api/core/#methods","title":"Methods","text":""},{"location":"api/core/#analyze_url","title":"analyze_url()","text":"<pre><code>def analyze_url(\n    self,\n    url: str,\n    *,\n    headers: dict[str, str] | None = None,\n    follow_redirects: bool = False\n) -&gt; list[RequestStep]\n</code></pre> <p>Analyze an HTTP request and return detailed timing information.</p> <p>Parameters:</p> <ul> <li><code>url</code> - The URL to analyze (must include scheme: http:// or https://)</li> <li><code>headers</code> - Optional custom HTTP headers</li> <li><code>follow_redirects</code> - Whether to follow HTTP redirects</li> </ul> <p>Returns:</p> <ul> <li><code>list[RequestStep]</code> - List of request steps (one per redirect)</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code> - If URL is invalid</li> <li><code>TimeoutError</code> - If request times out</li> <li><code>ConnectionError</code> - If connection fails</li> </ul> <p>Example:</p> <pre><code>from httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\n    \"https://httpbin.io\",\n    headers={\"Accept\": \"application/json\"},\n    follow_redirects=True\n)\n</code></pre>"},{"location":"api/core/#data-models","title":"Data Models","text":""},{"location":"api/core/#requeststep","title":"RequestStep","text":"<p>Represents a single HTTP request/response cycle.</p> <pre><code>@dataclass\nclass RequestStep:\n    url: str                    # Request URL\n    step_number: int           # Step number in redirect chain\n    timing: TimingInfo         # Timing information\n    network: NetworkInfo       # Network details\n    response: ResponseInfo     # Response data\n    error: str | None          # Error message if failed\n    note: str | None           # Additional notes\n</code></pre>"},{"location":"api/core/#timinginfo","title":"TimingInfo","text":"<p>Contains detailed timing breakdown for the request.</p> <pre><code>@dataclass\nclass TimingInfo:\n    dns_ms: float              # DNS resolution time\n    connect_ms: float          # TCP connection time\n    tls_ms: float              # TLS handshake time\n    ttfb_ms: float             # Time to first byte\n    total_ms: float            # Total request time\n    wait_ms: float             # Server processing time\n    xfer_ms: float             # Body transfer time\n    is_estimated: bool         # Whether timing is estimated\n</code></pre>"},{"location":"api/core/#networkinfo","title":"NetworkInfo","text":"<p>Contains network-level details about the connection.</p> <pre><code>@dataclass\nclass NetworkInfo:\n    ip: str                    # IP address\n    ip_family: str             # \"IPv4\" or \"IPv6\"\n    tls_version: str           # TLS protocol version\n    tls_cipher: str            # Cipher suite name\n    cert_cn: str               # Certificate common name\n    cert_days_left: int        # Days until certificate expires\n</code></pre>"},{"location":"api/core/#responseinfo","title":"ResponseInfo","text":"<p>Contains HTTP response metadata.</p> <pre><code>@dataclass\nclass ResponseInfo:\n    status: int                # HTTP status code\n    bytes: int                 # Response body size\n    content_type: str | None   # Content-Type header\n    server: str | None         # Server header\n    date: str | None           # Response date\n    location: str | None       # Location header (redirects)\n    headers: dict[str, str]    # All response headers\n</code></pre>"},{"location":"api/core/#utility-functions","title":"Utility Functions","text":""},{"location":"api/core/#format_duration","title":"format_duration()","text":"<p>Format duration in milliseconds to human-readable string.</p> <pre><code>from httptap.utils import format_duration\n\nformatted = format_duration(1234.56)  # \"1234.6ms\"\n</code></pre>"},{"location":"api/core/#parse_certificate","title":"parse_certificate()","text":"<p>Extract certificate information from SSL connection.</p> <pre><code>from httptap.utils import parse_certificate\n\ncert_info = parse_certificate(ssl_cert_dict)\n# Returns: (common_name, days_until_expiry)\n</code></pre>"},{"location":"api/core/#detect_ip_family","title":"detect_ip_family()","text":"<p>Determine if an IP address is IPv4 or IPv6.</p> <pre><code>from httptap.utils import detect_ip_family\n\nfamily = detect_ip_family(\"192.168.1.1\")     # \"IPv4\"\nfamily = detect_ip_family(\"2001:db8::1\")     # \"IPv6\"\n</code></pre>"},{"location":"api/core/#constants","title":"Constants","text":""},{"location":"api/core/#default-timeouts","title":"Default Timeouts","text":"<pre><code>from httptap.constants import (\n    DEFAULT_TIMEOUT,        # 30.0 seconds\n    DNS_TIMEOUT,           # 5.0 seconds\n    TLS_TIMEOUT,           # 10.0 seconds\n    REQUEST_TIMEOUT        # 30.0 seconds\n)\n</code></pre>"},{"location":"api/core/#http-settings","title":"HTTP Settings","text":"<pre><code>from httptap.constants import (\n    DEFAULT_USER_AGENT,    # \"httptap/X.Y.Z\"\n    MAX_REDIRECTS,         # 10\n    MAX_BODY_SIZE          # 10 MB\n)\n</code></pre>"},{"location":"api/core/#example-complete-usage","title":"Example: Complete Usage","text":"<pre><code>from httptap import HTTPTapAnalyzer\nfrom httptap.implementations import SystemDNSResolver, SocketTLSInspector\n\n# Create analyzer with custom components\nresolver = SystemDNSResolver()\ninspector = SocketTLSInspector()\n\nanalyzer = HTTPTapAnalyzer(\n    dns_resolver=resolver,\n    tls_inspector=inspector\n)\n\n# Analyze with custom headers\nsteps = analyzer.analyze_url(\n    \"https://httpbin.io/bearer\",\n    headers={\n        \"Authorization\": \"Bearer token123\",\n        \"Accept\": \"application/json\",\n        \"User-Agent\": \"MyApp/1.0\"\n    },\n    follow_redirects=True\n)\n\n# Process results\nfor step in steps:\n    print(f\"Step {step.step_number}: {step.url}\")\n    print(f\"  Status: {step.response.status}\")\n    print(f\"  DNS: {step.timing.dns_ms:.2f}ms\")\n    print(f\"  Connect: {step.timing.connect_ms:.2f}ms\")\n    print(f\"  TLS: {step.timing.tls_ms:.2f}ms\")\n    print(f\"  TTFB: {step.timing.ttfb_ms:.2f}ms\")\n    print(f\"  Total: {step.timing.total_ms:.2f}ms\")\n    print(f\"  IP: {step.network.ip} ({step.network.ip_family})\")\n    print(f\"  TLS: {step.network.tls_version}\")\n    print(f\"  Certificate: {step.network.cert_cn} \"\n          f\"(expires in {step.network.cert_days_left} days)\")\n</code></pre>"},{"location":"api/core/#whats-next","title":"What's Next?","text":"<ul> <li> <p> Protocol Interfaces</p> <p>Implement custom DNS, TLS, timing, and more</p> </li> <li> <p> Advanced Usage</p> <p>Patterns for monitoring, testing, batch analysis</p> </li> <li> <p> Contributing</p> <p>Extend httptap and contribute back</p> </li> </ul>"},{"location":"api/interfaces/","title":"Protocol Interfaces","text":"<p>httptap uses Protocol classes (PEP 544) for structural subtyping. This allows you to provide custom implementations without inheriting from base classes.</p>"},{"location":"api/interfaces/#why-protocols","title":"Why Protocols?","text":"<p>Protocols provide:</p> <ul> <li>Duck typing with type safety - Type checkers verify your implementation</li> <li>No inheritance required - Just implement the methods</li> <li>Clear contracts - Explicit interface definitions</li> <li>Easy testing - Simple to mock and substitute</li> </ul>"},{"location":"api/interfaces/#dnsresolverprotocol","title":"DNSResolverProtocol","text":"<p>Interface for DNS resolution implementations.</p>"},{"location":"api/interfaces/#protocol-definition","title":"Protocol Definition","text":"<pre><code>from typing import Protocol\n\nclass DNSResolverProtocol(Protocol):\n    def resolve(\n        self,\n        host: str,\n        port: int,\n        timeout: float\n    ) -&gt; tuple[str, str, float]:\n        \"\"\"Resolve hostname to IP address.\n\n        Args:\n            host: Hostname to resolve\n            port: Port number (may influence resolution)\n            timeout: Maximum time to wait in seconds\n\n        Returns:\n            Tuple of (ip_address, family, duration_ms) where:\n            - ip_address: Resolved IP address string\n            - family: \"IPv4\" or \"IPv6\"\n            - duration_ms: Resolution time in milliseconds\n\n        Raises:\n            Exception: If resolution fails\n        \"\"\"\n        ...\n</code></pre>"},{"location":"api/interfaces/#example-implementation","title":"Example Implementation","text":"<pre><code>import socket\nimport time\n\nclass CustomDNSResolver:\n    def resolve(self, host: str, port: int, timeout: float):\n        start = time.perf_counter()\n\n        try:\n            # Use getaddrinfo for resolution\n            addr_info = socket.getaddrinfo(\n                host, port,\n                socket.AF_UNSPEC,\n                socket.SOCK_STREAM\n            )\n            ip_address = addr_info[0][4][0]\n\n            # Determine IP family\n            family = \"IPv6\" if \":\" in ip_address else \"IPv4\"\n\n            duration_ms = (time.perf_counter() - start) * 1000\n            return ip_address, family, duration_ms\n\n        except socket.gaierror as e:\n            raise Exception(f\"DNS resolution failed: {e}\")\n\n# Usage\nfrom httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer(dns_resolver=CustomDNSResolver())\n</code></pre>"},{"location":"api/interfaces/#tlsinspectorprotocol","title":"TLSInspectorProtocol","text":"<p>Interface for TLS connection and certificate inspection.</p>"},{"location":"api/interfaces/#protocol-definition_1","title":"Protocol Definition","text":"<pre><code>from typing import Protocol\n\nclass TLSInspectorProtocol(Protocol):\n    def inspect(\n        self,\n        host: str,\n        port: int,\n        timeout: float\n    ) -&gt; tuple[str, str, str, int, float]:\n        \"\"\"Inspect TLS connection and certificate.\n\n        Args:\n            host: Hostname to connect to\n            port: Port number\n            timeout: Maximum time to wait in seconds\n\n        Returns:\n            Tuple of (version, cipher, cert_cn, days_left, duration_ms) where:\n            - version: TLS protocol version (e.g., \"TLSv1.3\")\n            - cipher: Cipher suite name\n            - cert_cn: Certificate common name\n            - days_left: Days until certificate expires\n            - duration_ms: Inspection time in milliseconds\n\n        Raises:\n            Exception: If inspection fails\n        \"\"\"\n        ...\n</code></pre>"},{"location":"api/interfaces/#example-implementation_1","title":"Example Implementation","text":"<pre><code>import ssl\nimport socket\nimport time\nfrom datetime import datetime\n\nclass CustomTLSInspector:\n    def inspect(self, host: str, port: int, timeout: float):\n        start = time.perf_counter()\n\n        try:\n            context = ssl.create_default_context()\n            with socket.create_connection((host, port), timeout=timeout) as sock:\n                with context.wrap_socket(sock, server_hostname=host) as ssock:\n                    # Get TLS version\n                    version = ssock.version()\n\n                    # Get cipher suite\n                    cipher = ssock.cipher()[0]\n\n                    # Get certificate info\n                    cert = ssock.getpeercert()\n                    cert_cn = dict(x[0] for x in cert['subject'])['commonName']\n\n                    # Calculate days until expiry\n                    not_after = datetime.strptime(\n                        cert['notAfter'],\n                        '%b %d %H:%M:%S %Y %Z'\n                    )\n                    days_left = (not_after - datetime.now()).days\n\n                    duration_ms = (time.perf_counter() - start) * 1000\n                    return version, cipher, cert_cn, days_left, duration_ms\n\n        except Exception as e:\n            raise Exception(f\"TLS inspection failed: {e}\")\n\n# Usage\nfrom httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer(tls_inspector=CustomTLSInspector())\n</code></pre>"},{"location":"api/interfaces/#timingproviderprotocol","title":"TimingProviderProtocol","text":"<p>Interface for HTTP request timing implementations.</p>"},{"location":"api/interfaces/#protocol-definition_2","title":"Protocol Definition","text":"<pre><code>from typing import Protocol\nfrom httptap.models import RequestStep\n\nclass TimingProviderProtocol(Protocol):\n    def time_request(\n        self,\n        url: str,\n        headers: dict[str, str] | None = None\n    ) -&gt; RequestStep:\n        \"\"\"Execute HTTP request and capture timing.\n\n        Args:\n            url: URL to request\n            headers: Optional custom headers\n\n        Returns:\n            RequestStep with complete timing and response information\n\n        Raises:\n            Exception: If request fails\n        \"\"\"\n        ...\n</code></pre>"},{"location":"api/interfaces/#example-implementation_2","title":"Example Implementation","text":"<pre><code>import httpx\nimport time\nfrom httptap.models import RequestStep, TimingInfo, NetworkInfo, ResponseInfo\n\nclass CustomTimingProvider:\n    def time_request(self, url: str, headers: dict | None = None):\n        start_total = time.perf_counter()\n\n        # Make request\n        with httpx.Client() as client:\n            response = client.get(url, headers=headers or {}, follow_redirects=False)\n\n        total_ms = (time.perf_counter() - start_total) * 1000\n\n        # Build timing info (simplified)\n        timing = TimingInfo(\n            dns_ms=0.0,\n            connect_ms=0.0,\n            tls_ms=0.0,\n            ttfb_ms=total_ms,\n            total_ms=total_ms,\n            wait_ms=0.0,\n            xfer_ms=0.0,\n            is_estimated=True\n        )\n\n        # Build network info (simplified)\n        network = NetworkInfo(\n            ip=\"\",\n            ip_family=\"\",\n            tls_version=\"\",\n            tls_cipher=\"\",\n            cert_cn=\"\",\n            cert_days_left=0\n        )\n\n        # Build response info\n        response_info = ResponseInfo(\n            status=response.status_code,\n            bytes=len(response.content),\n            content_type=response.headers.get(\"content-type\"),\n            server=response.headers.get(\"server\"),\n            date=response.headers.get(\"date\"),\n            location=response.headers.get(\"location\"),\n            headers=dict(response.headers)\n        )\n\n        return RequestStep(\n            url=url,\n            step_number=1,\n            timing=timing,\n            network=network,\n            response=response_info,\n            error=None,\n            note=None\n        )\n\n# Usage\nfrom httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer(timing_provider=CustomTimingProvider())\n</code></pre>"},{"location":"api/interfaces/#visualizerprotocol","title":"VisualizerProtocol","text":"<p>Interface for custom output visualization.</p>"},{"location":"api/interfaces/#protocol-definition_3","title":"Protocol Definition","text":"<pre><code>from typing import Protocol\nfrom httptap.models import RequestStep\n\nclass VisualizerProtocol(Protocol):\n    def render(\n        self,\n        steps: list[RequestStep],\n        *,\n        follow: bool = False\n    ) -&gt; None:\n        \"\"\"Render request steps for display.\n\n        Args:\n            steps: List of request steps to visualize\n            follow: Whether steps are from redirect chain\n\n        Returns:\n            None (output to console/stdout)\n        \"\"\"\n        ...\n</code></pre>"},{"location":"api/interfaces/#example-implementation_3","title":"Example Implementation","text":"<pre><code>from httptap.models import RequestStep\n\nclass SimpleVisualizer:\n    \"\"\"Simple text-based visualizer.\"\"\"\n\n    def render(self, steps: list[RequestStep], *, follow: bool = False):\n        print(f\"\\nAnalyzed {len(steps)} step(s):\\n\")\n\n        for step in steps:\n            print(f\"Step {step.step_number}: {step.url}\")\n            print(f\"  Status: {step.response.status}\")\n            print(f\"  Timing:\")\n            print(f\"    DNS:     {step.timing.dns_ms:8.2f}ms\")\n            print(f\"    Connect: {step.timing.connect_ms:8.2f}ms\")\n            print(f\"    TLS:     {step.timing.tls_ms:8.2f}ms\")\n            print(f\"    TTFB:    {step.timing.ttfb_ms:8.2f}ms\")\n            print(f\"    Total:   {step.timing.total_ms:8.2f}ms\")\n            print()\n\n# Usage\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\"https://httpbin.io\")\n\nvisualizer = SimpleVisualizer()\nvisualizer.render(steps)\n</code></pre>"},{"location":"api/interfaces/#exporterprotocol","title":"ExporterProtocol","text":"<p>Interface for custom data export formats.</p>"},{"location":"api/interfaces/#protocol-definition_4","title":"Protocol Definition","text":"<pre><code>from typing import Protocol\nfrom httptap.models import RequestStep\n\nclass ExporterProtocol(Protocol):\n    def export(\n        self,\n        steps: list[RequestStep],\n        output_path: str\n    ) -&gt; None:\n        \"\"\"Export request data to file.\n\n        Args:\n            steps: List of request steps to export\n            output_path: Path to output file\n\n        Returns:\n            None (writes to file)\n\n        Raises:\n            Exception: If export fails\n        \"\"\"\n        ...\n</code></pre>"},{"location":"api/interfaces/#example-implementation_4","title":"Example Implementation","text":"<pre><code>import yaml\nfrom httptap.models import RequestStep\n\nclass YAMLExporter:\n    \"\"\"Export request data to YAML format.\"\"\"\n\n    def export(self, steps: list[RequestStep], output_path: str):\n        data = {\n            \"total_steps\": len(steps),\n            \"steps\": []\n        }\n\n        for step in steps:\n            step_data = {\n                \"url\": step.url,\n                \"status\": step.response.status,\n                \"timing\": {\n                    \"dns_ms\": step.timing.dns_ms,\n                    \"connect_ms\": step.timing.connect_ms,\n                    \"tls_ms\": step.timing.tls_ms,\n                    \"ttfb_ms\": step.timing.ttfb_ms,\n                    \"total_ms\": step.timing.total_ms\n                },\n                \"network\": {\n                    \"ip\": step.network.ip,\n                    \"family\": step.network.ip_family,\n                    \"tls_version\": step.network.tls_version\n                }\n            }\n            data[\"steps\"].append(step_data)\n\n        with open(output_path, 'w') as f:\n            yaml.dump(data, f, default_flow_style=False)\n\n# Usage\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\"https://httpbin.io\")\n\nexporter = YAMLExporter()\nexporter.export(steps, \"output.yaml\")\n</code></pre>"},{"location":"api/interfaces/#type-checking","title":"Type Checking","text":"<p>All protocols are fully type-hinted and work with mypy, pyright, and other type checkers.</p> <pre><code>from typing import reveal_type\nfrom httptap.interfaces import DNSResolverProtocol\n\nclass MyResolver:\n    def resolve(self, host: str, port: int, timeout: float):\n        return \"192.168.1.1\", \"IPv4\", 10.5\n\n# Type checker will verify MyResolver implements the protocol\nresolver: DNSResolverProtocol = MyResolver()\nreveal_type(resolver)  # Type: DNSResolverProtocol\n</code></pre>"},{"location":"api/interfaces/#next-steps","title":"Next Steps","text":"<ul> <li>See core components documentation</li> <li>Review advanced usage examples</li> <li>Check contributing guidelines to add new protocols</li> </ul>"},{"location":"api/overview/","title":"API Overview","text":"<p>httptap provides a clean Python API for programmatic usage and extension. This page gives an overview of the main components.</p>"},{"location":"api/overview/#architecture","title":"Architecture","text":"<p>httptap is built around a modular architecture with clear interfaces:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  CLI Interface  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  HTTPTapAnalyzer\u2502 \u25c4\u2500\u2500 Main entry point\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u251c\u2500\u25ba DNS Resolver (Protocol)\n         \u251c\u2500\u25ba TLS Inspector (Protocol)\n         \u251c\u2500\u25ba Timing Provider (Protocol)\n         \u251c\u2500\u25ba Visualizer (Protocol)\n         \u2514\u2500\u25ba Exporter (Protocol)\n</code></pre>"},{"location":"api/overview/#core-components","title":"Core Components","text":""},{"location":"api/overview/#httptapanalyzer","title":"HTTPTapAnalyzer","text":"<p>The main analyzer class that orchestrates HTTP request analysis.</p> <pre><code>from httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\"https://httpbin.io\")\n</code></pre>"},{"location":"api/overview/#requeststep","title":"RequestStep","text":"<p>Data model representing a single request/response cycle.</p> <pre><code>from httptap.models import RequestStep\n\nstep: RequestStep\nprint(step.url)           # Request URL\nprint(step.timing)        # Timing information\nprint(step.network)       # Network details\nprint(step.response)      # Response data\n</code></pre>"},{"location":"api/overview/#timing-information","title":"Timing Information","text":"<pre><code>step.timing.dns_ms        # DNS resolution time\nstep.timing.connect_ms    # TCP connection time\nstep.timing.tls_ms        # TLS handshake time\nstep.timing.ttfb_ms       # Time to first byte\nstep.timing.total_ms      # Total request time\nstep.timing.wait_ms       # Server processing time\nstep.timing.xfer_ms       # Body transfer time\nstep.timing.is_estimated  # Whether timing is estimated\n</code></pre>"},{"location":"api/overview/#network-information","title":"Network Information","text":"<pre><code>step.network.ip             # IP address\nstep.network.ip_family      # IPv4 or IPv6\nstep.network.tls_version    # TLS protocol version\nstep.network.tls_cipher     # Cipher suite\nstep.network.cert_cn        # Certificate common name\nstep.network.cert_days_left # Days until expiration\n</code></pre>"},{"location":"api/overview/#response-data","title":"Response Data","text":"<pre><code>step.response.status        # HTTP status code\nstep.response.bytes         # Response body size\nstep.response.content_type  # Content-Type header\nstep.response.server        # Server header\nstep.response.date          # Response date\nstep.response.location      # Location header (redirects)\nstep.response.headers       # All headers dict\n</code></pre>"},{"location":"api/overview/#protocol-interfaces","title":"Protocol Interfaces","text":"<p>httptap uses Protocol classes (PEP 544) for type-safe extensibility.</p>"},{"location":"api/overview/#dnsresolverprotocol","title":"DNSResolverProtocol","text":"<p>Interface for custom DNS resolution implementations.</p> <pre><code>from httptap.interfaces import DNSResolverProtocol\n\nclass CustomResolver:\n    def resolve(self, host: str, port: int, timeout: float):\n        \"\"\"Resolve host to IP address.\n\n        Returns:\n            tuple[str, str, float]: (ip_address, family, duration_ms)\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/overview/#tlsinspectorprotocol","title":"TLSInspectorProtocol","text":"<p>Interface for TLS certificate and connection inspection.</p> <pre><code>from httptap.interfaces import TLSInspectorProtocol\n\nclass CustomTLSInspector:\n    def inspect(self, host: str, port: int, timeout: float):\n        \"\"\"Inspect TLS connection and certificate.\n\n        Returns:\n            tuple: (tls_version, cipher, cert_cn, days_left, duration_ms)\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/overview/#timingproviderprotocol","title":"TimingProviderProtocol","text":"<p>Interface for request timing implementations.</p> <pre><code>from httptap.interfaces import TimingProviderProtocol\n\nclass CustomTimingProvider:\n    def time_request(self, url: str, headers: dict):\n        \"\"\"Time HTTP request execution.\n\n        Returns:\n            RequestStep: Complete step with timing information\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/overview/#visualizerprotocol","title":"VisualizerProtocol","text":"<p>Interface for custom output visualization.</p> <pre><code>from httptap.interfaces import VisualizerProtocol\nfrom httptap.models import RequestStep\n\nclass CustomVisualizer:\n    def render(self, steps: list[RequestStep], *, follow: bool = False):\n        \"\"\"Render request steps for display.\"\"\"\n        pass\n</code></pre>"},{"location":"api/overview/#exporterprotocol","title":"ExporterProtocol","text":"<p>Interface for custom data export formats.</p> <pre><code>from httptap.interfaces import ExporterProtocol\nfrom httptap.models import RequestStep\n\nclass CustomExporter:\n    def export(self, steps: list[RequestStep], output_path: str):\n        \"\"\"Export request data to file.\"\"\"\n        pass\n</code></pre>"},{"location":"api/overview/#built-in-implementations","title":"Built-in Implementations","text":"<p>httptap provides default implementations of all protocols:</p>"},{"location":"api/overview/#systemdnsresolver","title":"SystemDNSResolver","text":"<p>Uses Python's <code>socket.getaddrinfo()</code> for DNS resolution.</p> <pre><code>from httptap.implementations import SystemDNSResolver\n\nresolver = SystemDNSResolver()\nip, family, duration = resolver.resolve(\"httpbin.io\", 443, timeout=5.0)\n</code></pre>"},{"location":"api/overview/#sockettlsinspector","title":"SocketTLSInspector","text":"<p>Uses Python's <code>ssl</code> module to inspect TLS connections.</p> <pre><code>from httptap.implementations import SocketTLSInspector\n\ninspector = SocketTLSInspector()\nversion, cipher, cn, days, duration = inspector.inspect(\"httpbin.io\", 443, 5.0)\n</code></pre>"},{"location":"api/overview/#httpcoretimingprovider","title":"HTTPCoreTimingProvider","text":"<p>Uses httpcore trace hooks for precise timing.</p> <pre><code>from httptap.implementations import HTTPCoreTimingProvider\n\nprovider = HTTPCoreTimingProvider()\nstep = provider.time_request(\"https://httpbin.io\", headers={})\n</code></pre>"},{"location":"api/overview/#waterfallvisualizer","title":"WaterfallVisualizer","text":"<p>Uses Rich library for beautiful terminal output.</p> <pre><code>from httptap import WaterfallVisualizer\n\nvisualizer = WaterfallVisualizer()\nvisualizer.render(steps)\n</code></pre>"},{"location":"api/overview/#jsonexporter","title":"JSONExporter","text":"<p>Exports request data to JSON format.</p> <pre><code>from httptap import JSONExporter\n\nexporter = JSONExporter()\nexporter.export(steps, \"output.json\")\n</code></pre>"},{"location":"api/overview/#type-hints","title":"Type Hints","text":"<p>All public APIs are fully type-hinted for excellent IDE support.</p> <pre><code>from httptap import HTTPTapAnalyzer\nfrom httptap.models import RequestStep\n\ndef analyze_api(url: str) -&gt; list[RequestStep]:\n    \"\"\"Analyze API endpoint and return steps.\"\"\"\n    analyzer: HTTPTapAnalyzer = HTTPTapAnalyzer()\n    steps: list[RequestStep] = analyzer.analyze_url(url)\n    return steps\n</code></pre>"},{"location":"api/overview/#error-handling","title":"Error Handling","text":"<p>httptap raises standard Python exceptions:</p> <ul> <li><code>ValueError</code> - Invalid input parameters</li> <li><code>TimeoutError</code> - Request timeout exceeded</li> <li><code>ConnectionError</code> - Network connection failed</li> <li><code>Exception</code> - General errors with descriptive messages</li> </ul> <pre><code>from httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\n\ntry:\n    steps = analyzer.analyze_url(\"https://invalid-domain.com\")\nexcept TimeoutError:\n    print(\"Request timed out\")\nexcept ConnectionError:\n    print(\"Connection failed\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"api/overview/#whats-next","title":"What's Next?","text":"<ul> <li> <p> Core Components</p> <p>HTTPTapAnalyzer, data models, utilities</p> </li> <li> <p> Protocol Interfaces</p> <p>Extend with custom implementations</p> </li> <li> <p> Advanced Usage</p> <p>Real-world examples and patterns</p> </li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>We welcome contributions to httptap! This guide will help you get started.</p>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that this project follows the Contributor Covenant Code of Conduct. By participating, you are expected to uphold this code.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher (CPython)</li> <li>uv package manager</li> <li>Git</li> </ul>"},{"location":"development/contributing/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li>Fork and clone the repository:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/httptap.git\ncd httptap\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>uv sync\n</code></pre> <ol> <li>Verify installation:</li> </ol> <pre><code>uv run httptap --version\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<p>Run the full test suite:</p> <pre><code>uv run pytest\n</code></pre> <p>Run with coverage:</p> <pre><code>uv run pytest --cov --cov-report=html\n</code></pre> <p>View coverage report:</p> <pre><code>open htmlcov/index.html  # macOS\nxdg-open htmlcov/index.html  # Linux\n</code></pre>"},{"location":"development/contributing/#code-quality","title":"Code Quality","text":""},{"location":"development/contributing/#linting","title":"Linting","text":"<p>Run Ruff linter:</p> <pre><code>uv run ruff check\n</code></pre> <p>Auto-fix issues:</p> <pre><code>uv run ruff check --fix\n</code></pre>"},{"location":"development/contributing/#formatting","title":"Formatting","text":"<p>Check formatting:</p> <pre><code>uv run ruff format --check\n</code></pre> <p>Auto-format code:</p> <pre><code>uv run ruff format .\n</code></pre>"},{"location":"development/contributing/#type-checking","title":"Type Checking","text":"<p>Run mypy:</p> <pre><code>uv run mypy httptap\n</code></pre>"},{"location":"development/contributing/#running-locally","title":"Running Locally","text":"<p>Test your changes:</p> <pre><code>uv run httptap https://httpbin.io\n</code></pre> <p>Or install in editable mode:</p> <pre><code>uv pip install -e .\nhttptap https://httpbin.io\n</code></pre>"},{"location":"development/contributing/#making-changes","title":"Making Changes","text":""},{"location":"development/contributing/#branch-naming","title":"Branch Naming","text":"<p>Use descriptive branch names:</p> <ul> <li><code>feature/add-http2-support</code> - New features</li> <li><code>fix/tls-timeout-issue</code> - Bug fixes</li> <li><code>docs/update-api-reference</code> - Documentation</li> <li><code>refactor/extract-parser</code> - Code refactoring</li> </ul>"},{"location":"development/contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow conventional commits format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre> <p>Types:</p> <ul> <li><code>feat</code> - New feature</li> <li><code>fix</code> - Bug fix</li> <li><code>docs</code> - Documentation changes</li> <li><code>refactor</code> - Code refactoring</li> <li><code>test</code> - Adding/updating tests</li> <li><code>chore</code> - Maintenance tasks</li> <li><code>perf</code> - Performance improvements</li> </ul> <p>Examples:</p> <pre><code>feat(cli): add --timeout flag for request timeout\n\nAdd command-line option to specify custom timeout for HTTP requests.\nDefaults to 30 seconds if not specified.\n\nCloses #123\n</code></pre> <pre><code>fix(tls): handle certificate expiry edge case\n\nFix crash when certificate expiry date is in the past.\nNow properly reports negative days and warns user.\n\nFixes #456\n</code></pre>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>Follow the Google Python Style Guide:</p> <ul> <li>Use type hints for all function signatures</li> <li>Write docstrings for all public APIs</li> <li>Keep lines under 120 characters</li> <li>Use double quotes for strings</li> <li>Follow PEP 8 naming conventions</li> </ul> <p>Example:</p> <pre><code>def resolve_hostname(host: str, timeout: float = 5.0) -&gt; tuple[str, str]:\n    \"\"\"Resolve hostname to IP address.\n\n    Args:\n        host: Hostname to resolve.\n        timeout: Maximum time to wait in seconds.\n\n    Returns:\n        Tuple of (ip_address, family).\n\n    Raises:\n        DNSError: If resolution fails.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"development/contributing/#testing-guidelines","title":"Testing Guidelines","text":"<ul> <li>Write tests for all new features</li> <li>Maintain or improve code coverage</li> <li>Use descriptive test names</li> <li>Mock external dependencies (DNS, TLS, HTTP)</li> <li>Test both success and failure cases</li> </ul> <p>Example:</p> <pre><code>def test_analyzer_follows_redirects(mock_http_client):\n    \"\"\"Test that analyzer follows redirect chains correctly.\"\"\"\n    analyzer = HTTPTapAnalyzer()\n    steps = analyzer.analyze_url(\n        \"https://httpbin.io/redirect/3\",\n        follow_redirects=True\n    )\n\n    assert len(steps) == 4  # Initial + 3 redirects\n    assert steps[-1].response.status == 200\n</code></pre>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a feature branch:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li>Make your changes and commit:</li> </ol> <pre><code>git add .\ngit commit -m \"feat: add awesome feature\"\n</code></pre> <ol> <li>Push to your fork:</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ol> <li> <p>Create a Pull Request:</p> <ul> <li>Go to the httptap repository</li> <li>Click \"New Pull Request\"</li> <li>Select your branch</li> <li>Fill out the PR template</li> </ul> </li> </ol>"},{"location":"development/contributing/#pr-checklist","title":"PR Checklist","text":"<p>Before submitting, ensure:</p> <ul> <li> Tests pass (<code>uv run pytest</code>)</li> <li> Code is formatted (<code>uv run ruff format .</code>)</li> <li> Linter passes (<code>uv run ruff check</code>)</li> <li> Type checks pass (<code>uv run mypy httptap</code>)</li> <li> Documentation is updated (if needed)</li> <li> CHANGELOG.md is updated (for significant changes)</li> <li> Commit messages follow conventional format</li> </ul>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#updating-docs","title":"Updating Docs","text":"<p>Documentation is in the <code>docs/</code> directory:</p> <pre><code>docs/\n\u251c\u2500\u2500 getting-started/\n\u251c\u2500\u2500 usage/\n\u251c\u2500\u2500 api/\n\u251c\u2500\u2500 development/\n\u2514\u2500\u2500 about/\n</code></pre> <p>Build docs locally:</p> <pre><code>uv run mkdocs serve\n</code></pre> <p>View at: http://127.0.0.1:8000</p>"},{"location":"development/contributing/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Use clear, concise language</li> <li>Include code examples</li> <li>Keep examples realistic and practical</li> <li>Use proper Markdown formatting</li> <li>Test all code examples</li> </ul>"},{"location":"development/contributing/#areas-for-contribution","title":"Areas for Contribution","text":""},{"location":"development/contributing/#good-first-issues","title":"Good First Issues","text":"<p>Look for issues labeled <code>good first issue</code> - these are beginner-friendly.</p>"},{"location":"development/contributing/#help-wanted","title":"Help Wanted","text":"<p>Issues labeled <code>help wanted</code> are priorities we'd love assistance with.</p>"},{"location":"development/contributing/#ideas-for-contributions","title":"Ideas for Contributions","text":"<ul> <li>HTTP/2 and HTTP/3 support - Extend to newer protocols</li> <li>More export formats - CSV, XML, Prometheus metrics</li> <li>Additional visualizations - Flamegraphs, charts</li> <li>Performance optimizations - Faster DNS, connection pooling</li> <li>More TLS details - OCSP, certificate chain analysis</li> <li>Custom reporters - Slack, webhook notifications</li> <li>Additional protocols - WebSocket, gRPC timing</li> </ul>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues - Bug reports and feature requests</li> <li>Discussions - Questions and general discussion</li> <li>Discord - Real-time chat (coming soon)</li> </ul>"},{"location":"development/contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in:</p> <ul> <li>CHANGELOG.md</li> <li>GitHub Contributors page</li> <li>Release notes</li> </ul> <p>Thank you for contributing to httptap! \ud83c\udf89</p>"},{"location":"development/release/","title":"Release Process","text":"<p>This document describes the automated release process for httptap.</p>"},{"location":"development/release/#overview","title":"Overview","text":"<p>Releases are fully automated using GitHub Actions. The workflow handles versioning, changelog generation, testing, building, and publishing to PyPI.</p>"},{"location":"development/release/#prerequisites","title":"Prerequisites","text":"<p>Before creating a release, ensure:</p> <ol> <li>GitHub Environment - <code>pypi</code> environment configured in repository settings</li> <li>PyPI Trusted Publishing - Configured for <code>ozeranskii/httptap</code> repository</li> <li>Deploy Key - SSH deploy key with write access (for bypassing branch protection)</li> <li>All tests passing - CI must be green on main branch</li> </ol>"},{"location":"development/release/#release-workflow","title":"Release Workflow","text":"<p>The release process is triggered manually via GitHub Actions.</p>"},{"location":"development/release/#triggering-a-release","title":"Triggering a Release","text":"<ol> <li>Go to Actions \u2192 Release workflow</li> <li>Click Run workflow</li> <li>Choose version strategy:<ul> <li>Explicit version: Enter exact version (e.g., <code>0.3.0</code>)</li> <li>Semantic bump: Select <code>patch</code>, <code>minor</code>, or <code>major</code></li> </ul> </li> </ol>"},{"location":"development/release/#semantic-versioning","title":"Semantic Versioning","text":"Bump Type Example Use Case <code>patch</code> 0.1.0 \u2192 0.1.1 Bug fixes, small improvements <code>minor</code> 0.1.0 \u2192 0.2.0 New features, backwards compatible <code>major</code> 0.1.0 \u2192 1.0.0 Breaking changes"},{"location":"development/release/#what-happens-automatically","title":"What Happens Automatically","text":"<ol> <li> <p>Version Update <pre><code>uv version 0.2.0  # or\nuv version --bump minor\n</code></pre>    Updates <code>version</code> in <code>pyproject.toml</code></p> </li> <li> <p>Lockfile Refresh <pre><code>uv lock\n</code></pre>    Regenerates <code>uv.lock</code> so it stays in sync with the new version</p> </li> <li> <p>Changelog Generation <pre><code>git cliff --tag v0.2.0 --unreleased --prepend CHANGELOG.md\n</code></pre>    Generates changelog from conventional commits</p> </li> <li> <p>Commit and Tag <pre><code>git commit -m \"chore: release v0.2.0\"\ngit tag -a v0.2.0 -m \"Release v0.2.0\"\ngit push origin HEAD\ngit push origin v0.2.0\n</code></pre></p> </li> <li> <p>Build <pre><code>uv sync --locked --group test\nuv run pytest  # Full test suite\nuv build  # Create wheel and sdist\n</code></pre></p> </li> <li> <p>Publish to PyPI</p> <ul> <li>Uses OIDC Trusted Publishing (no tokens required)</li> <li>Uploads wheel and source distribution</li> </ul> </li> <li> <p>GitHub Release</p> <ul> <li>Creates release with generated notes</li> <li>Attaches build artifacts</li> </ul> </li> </ol>"},{"location":"development/release/#workflow-configuration","title":"Workflow Configuration","text":"<p>The release workflow is defined in <code>.github/workflows/release.yml</code>:</p>"},{"location":"development/release/#key-jobs","title":"Key Jobs","text":""},{"location":"development/release/#1-prepare-release","title":"1. Prepare Release","text":"<ul> <li>Checks out code with deploy key</li> <li>Configures Python and uv</li> <li>Updates version in pyproject.toml</li> <li>Generates changelog</li> <li>Commits and pushes changes</li> <li>Creates and pushes git tag</li> </ul>"},{"location":"development/release/#2-build-package","title":"2. Build Package","text":"<ul> <li>Checks out the tagged version</li> <li>Runs full test suite</li> <li>Builds wheel and sdist</li> <li>Uploads artifacts</li> </ul>"},{"location":"development/release/#3-publish-to-pypi","title":"3. Publish to PyPI","text":"<ul> <li>Downloads build artifacts</li> <li>Publishes using Trusted Publishing</li> </ul>"},{"location":"development/release/#4-create-github-release","title":"4. Create GitHub Release","text":"<ul> <li>Downloads artifacts</li> <li>Creates GitHub release with changelog notes</li> <li>Attaches wheel and sdist</li> </ul>"},{"location":"development/release/#changelog-generation","title":"Changelog Generation","text":"<p>Changelogs are automatically generated using git-cliff based on conventional commits.</p>"},{"location":"development/release/#commit-format","title":"Commit Format","text":"<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre>"},{"location":"development/release/#supported-types","title":"Supported Types","text":"Type Changelog Section Example <code>feat</code> Features <code>feat(cli): add --timeout flag</code> <code>fix</code> Bug Fixes <code>fix(tls): handle expired certificates</code> <code>perf</code> Performance <code>perf(dns): optimize resolver cache</code> <code>docs</code> Documentation <code>docs: update API reference</code> <code>refactor</code> Refactor <code>refactor(core): extract analyzer logic</code> <code>test</code> Testing <code>test: add integration tests</code> <code>chore</code> Miscellaneous <code>chore: update dependencies</code>"},{"location":"development/release/#breaking-changes","title":"Breaking Changes","text":"<p>Mark breaking changes in commit footer:</p> <pre><code>feat(api): redesign analyzer interface\n\nBREAKING CHANGE: HTTPTapAnalyzer constructor signature changed\n</code></pre>"},{"location":"development/release/#version-strategy","title":"Version Strategy","text":"<p>httptap follows Semantic Versioning:</p> <ul> <li>Major version (1.0.0) - Breaking changes</li> <li>Minor version (0.1.0) - New features, backwards compatible</li> <li>Patch version (0.0.1) - Bug fixes</li> </ul>"},{"location":"development/release/#pre-10-development","title":"Pre-1.0 Development","text":"<p>During pre-1.0 development (0.x.x):</p> <ul> <li>Minor version may include breaking changes</li> <li>Patch version for bug fixes and minor features</li> <li>Move to 1.0.0 when API is stable</li> </ul>"},{"location":"development/release/#manual-release-steps","title":"Manual Release Steps","text":"<p>If you need to release manually (not recommended):</p>"},{"location":"development/release/#1-update-version","title":"1. Update Version","text":"<pre><code>uv version 0.2.0\n</code></pre>"},{"location":"development/release/#2-regenerate-lockfile","title":"2. Regenerate Lockfile","text":"<pre><code>uv lock\n</code></pre>"},{"location":"development/release/#3-generate-changelog","title":"3. Generate Changelog","text":"<pre><code>git cliff --tag v0.2.0 --unreleased --prepend CHANGELOG.md\n</code></pre>"},{"location":"development/release/#4-commit-changes","title":"4. Commit Changes","text":"<pre><code>git add pyproject.toml uv.lock CHANGELOG.md\ngit commit -m \"chore: release v0.2.0\"\n</code></pre>"},{"location":"development/release/#5-create-tag","title":"5. Create Tag","text":"<pre><code>git tag -a v0.2.0 -m \"Release v0.2.0\"\n</code></pre>"},{"location":"development/release/#6-push","title":"6. Push","text":"<pre><code>git push origin main\ngit push origin v0.2.0\n</code></pre>"},{"location":"development/release/#7-build-and-publish","title":"7. Build and Publish","text":"<pre><code>uv build\nuv publish  # Requires PyPI credentials\n</code></pre>"},{"location":"development/release/#7-create-github-release","title":"7. Create GitHub Release","text":"<p>Use <code>gh</code> CLI or web interface to create release with changelog notes.</p>"},{"location":"development/release/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/release/#branch-protection-errors","title":"Branch Protection Errors","text":"<p>If push fails due to branch protection:</p> <ol> <li>Verify deploy key has write access</li> <li>Check deploy key is in bypass list for branch protection rules</li> <li>Ensure <code>ssh-key</code> is configured in workflow checkout</li> </ol>"},{"location":"development/release/#changelog-empty","title":"Changelog Empty","text":"<p>If changelog generation returns empty:</p> <ol> <li>Ensure commits follow conventional format</li> <li>Check git-cliff configuration in <code>.release/git-cliff.toml</code></li> <li>Verify tag doesn't already exist</li> </ol>"},{"location":"development/release/#pypi-publishing-fails","title":"PyPI Publishing Fails","text":"<p>If PyPI publishing fails:</p> <ol> <li>Verify <code>pypi</code> environment exists</li> <li>Check Trusted Publishing is configured on PyPI</li> <li>Ensure workflow has <code>id-token: write</code> permission</li> </ol>"},{"location":"development/release/#test-failures","title":"Test Failures","text":"<p>If tests fail during release:</p> <ol> <li>Workflow will stop before publishing</li> <li>Fix issues and re-run workflow</li> <li>No partial releases will occur</li> </ol>"},{"location":"development/release/#post-release","title":"Post-Release","text":"<p>After successful release:</p> <ol> <li>Verify package on PyPI: https://pypi.org/project/httptap/</li> <li>Check GitHub release: https://github.com/ozeranskii/httptap/releases</li> <li>Test installation: <code>uv pip install httptap=={version}</code></li> <li>Announce release (Twitter, Discord, etc.)</li> </ol>"},{"location":"development/release/#release-checklist","title":"Release Checklist","text":"<p>Before triggering release:</p> <ul> <li> All CI checks passing on main</li> <li> No known critical bugs</li> <li> Documentation updated</li> <li> Breaking changes documented</li> <li> Migration guide written (for major versions)</li> <li> Dependencies updated</li> <li> Security vulnerabilities addressed</li> </ul>"},{"location":"development/release/#see-also","title":"See Also","text":"<ul> <li>Conventional Commits</li> <li>Semantic Versioning</li> <li>git-cliff documentation</li> <li>PyPI Trusted Publishing</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>Before installing httptap, ensure you have:</p> <ul> <li>Python 3.10 or higher (CPython recommended)</li> <li>pip or uv package manager</li> <li>macOS, Linux, or Windows operating system</li> </ul> <p>No system dependencies beyond standard networking are required.</p>"},{"location":"getting-started/installation/#installing-from-pypi","title":"Installing from PyPI","text":"Using uv (recommended)Using pipUsing pipx <pre><code>uv pip install httptap\n</code></pre> <p>Or install as a global tool:</p> <pre><code>uv tool install httptap\n</code></pre> <pre><code>pip install httptap\n</code></pre> <p>For isolated CLI tool installation:</p> <pre><code>pipx install httptap\n</code></pre>"},{"location":"getting-started/installation/#installing-from-source","title":"Installing from Source","text":""},{"location":"getting-started/installation/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/ozeranskii/httptap.git\ncd httptap\n</code></pre>"},{"location":"getting-started/installation/#install-with-uv","title":"Install with uv","text":"<pre><code>uv sync\nuv pip install -e .\n</code></pre>"},{"location":"getting-started/installation/#install-with-pip","title":"Install with pip","text":"<pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, verify that httptap is correctly installed:</p> <pre><code>httptap --version\n</code></pre> <p>You should see output similar to:</p> <pre><code>httptap X.Y.Z\n</code></pre>"},{"location":"getting-started/installation/#upgrading","title":"Upgrading","text":"<p>To upgrade httptap to the latest version:</p> Using uvUsing pip <pre><code>uv pip install --upgrade httptap\n</code></pre> <pre><code>pip install --upgrade httptap\n</code></pre>"},{"location":"getting-started/installation/#uninstalling","title":"Uninstalling","text":"<p>To remove httptap from your system:</p> Using uvUsing pipUsing pipx <pre><code>uv pip uninstall httptap\n</code></pre> <pre><code>pip uninstall httptap\n</code></pre> <pre><code>pipx uninstall httptap\n</code></pre>"},{"location":"getting-started/installation/#whats-next","title":"What's Next?","text":"<ul> <li> <p> Quick Start Guide</p> <p>Learn the basics with simple examples</p> </li> <li> <p> Basic Usage</p> <p>Complete command-line reference</p> </li> <li> <p> API Reference</p> <p>Use httptap programmatically</p> </li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will walk you through the basic usage of httptap.</p>"},{"location":"getting-started/quick-start/#basic-request","title":"Basic Request","text":"<p>Run a simple HTTP request and display a rich waterfall view:</p> <pre><code>httptap https://httpbin.io\n</code></pre> <p>This will output a detailed timing breakdown showing:</p> <ul> <li>DNS resolution time</li> <li>TCP connection establishment</li> <li>TLS handshake (for HTTPS)</li> <li>Time to first byte (TTFB)</li> <li>Response body transfer time</li> </ul>"},{"location":"getting-started/quick-start/#adding-custom-headers","title":"Adding Custom Headers","text":"<p>Add custom HTTP headers using the <code>-H</code> flag:</p> <pre><code>httptap -H \"Accept: application/json\" https://httpbin.io/json\n</code></pre> <p>Multiple headers can be added by repeating the flag:</p> <pre><code>httptap \\\n  -H \"Accept: application/json\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  https://httpbin.io/bearer\n</code></pre>"},{"location":"getting-started/quick-start/#following-redirects","title":"Following Redirects","text":"<p>By default, httptap does not follow redirects. To follow redirect chains:</p> <pre><code>httptap --follow https://httpbin.io/redirect/3\n</code></pre> <p>This will show timing information for each step in the redirect chain.</p>"},{"location":"getting-started/quick-start/#compact-output","title":"Compact Output","text":"<p>For single-line output suitable for logging:</p> <pre><code>httptap --compact https://httpbin.io\n</code></pre> <p>Output example:</p> <pre><code>Step 1: dns=8.9ms connect=97.0ms tls=194.6ms ttfb=446.0ms total=447.3ms status=200 bytes=389\n</code></pre>"},{"location":"getting-started/quick-start/#metrics-only-mode","title":"Metrics-Only Mode","text":"<p>Get raw metrics without formatting, perfect for scripts:</p> <pre><code>httptap --metrics-only https://httpbin.io\n</code></pre> <p>Output example:</p> <pre><code>Step 1: dns=30.1 connect=97.3 tls=199.0 ttfb=472.2 total=476.0 status=200 bytes=389 ip=44.211.11.205 family=IPv4 tls_version=TLSv1.2\n</code></pre>"},{"location":"getting-started/quick-start/#json-export","title":"JSON Export","text":"<p>Export full request data to JSON for later analysis:</p> <pre><code>httptap --json output.json https://httpbin.io\n</code></pre> <p>The JSON file will contain:</p> <ul> <li>Detailed timing for all phases</li> <li>Network information (IP, TLS version, certificate details)</li> <li>Response metadata (status, headers, body size)</li> <li>Full redirect chain (if <code>--follow</code> is used)</li> </ul>"},{"location":"getting-started/quick-start/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/quick-start/#check-api-latency","title":"Check API Latency","text":"<pre><code>httptap --compact https://httpbin.io/status/200\n</code></pre>"},{"location":"getting-started/quick-start/#debug-slow-responses","title":"Debug Slow Responses","text":"<pre><code>httptap https://httpbin.io/delay/3\n</code></pre> <p>The waterfall view will help identify which phase is causing the delay (DNS, connection, TLS, or server processing).</p>"},{"location":"getting-started/quick-start/#verify-tls-configuration","title":"Verify TLS Configuration","text":"<pre><code>httptap https://httpbin.io\n</code></pre> <p>Check the TLS version, cipher suite, and certificate expiration in the output.</p>"},{"location":"getting-started/quick-start/#performance-benchmarking","title":"Performance Benchmarking","text":"<p>Establish performance baselines and track changes over time:</p> <pre><code># Collect 10 samples and calculate statistics\nfor i in {1..10}; do\n  httptap --metrics-only https://httpbin.io/delay/1\ndone | awk '/total=/ {\n  # Extract total value\n  for (i = 1; i &lt;= NF; i++) {\n    if ($i ~ /^total=/) {\n      sub(/^total=/, \"\", $i)\n      sum += $i\n      values[++count] = $i\n      break\n    }\n  }\n}\nEND {\n  if (count &gt; 0) {\n    avg = sum / count\n    printf \"Average: %.1f ms\\n\", avg\n    printf \"Samples: %d\\n\", count\n\n    # Calculate min/max\n    min = values[1]; max = values[1]\n    for (i = 1; i &lt;= count; i++) {\n      if (values[i] &lt; min) min = values[i]\n      if (values[i] &gt; max) max = values[i]\n    }\n    printf \"Min: %.1f ms\\n\", min\n    printf \"Max: %.1f ms\\n\", max\n    printf \"Range: %.1f ms\\n\", (max - min)\n  }\n}'\n</code></pre> <p>Example output: <pre><code>Average: 1490.0 ms\nSamples: 10\nMin: 1445.4 ms\nMax: 1532.4 ms\nRange: 87.0 ms\n</code></pre></p> <p>This helps identify performance variability and establish reliable baselines for regression testing.</p>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<ul> <li> <p> Basic Usage Guide</p> <p>Complete command-line reference</p> </li> <li> <p> Output Formats</p> <p>Rich, compact, JSON, and metrics modes</p> </li> <li> <p> API Reference</p> <p>Extend httptap with custom components</p> </li> </ul>"},{"location":"usage/advanced/","title":"Advanced Features","text":"<p>This guide covers advanced usage patterns and customization options for httptap.</p>"},{"location":"usage/advanced/#custom-dns-resolution","title":"Custom DNS Resolution","text":"<p>You can provide custom DNS resolver implementations by using the Python API.</p> <pre><code>from httptap import HTTPTapAnalyzer, SystemDNSResolver\n\nclass CustomDNSResolver(SystemDNSResolver):\n    \"\"\"Custom DNS resolver with hardcoded responses.\"\"\"\n\n    def resolve(self, host: str, port: int, timeout: float):\n        # Override with custom logic\n        if host == \"httpbin.io\":\n            return \"44.211.11.205\", \"IPv4\", 0.1\n        return super().resolve(host, port, timeout)\n\n# Use custom resolver\nanalyzer = HTTPTapAnalyzer(dns_resolver=CustomDNSResolver())\nsteps = analyzer.analyze_url(\"https://httpbin.io\")\n</code></pre>"},{"location":"usage/advanced/#custom-tls-inspection","title":"Custom TLS Inspection","text":"<p>Implement custom TLS inspection logic to extract additional certificate information.</p> <pre><code>from httptap import HTTPTapAnalyzer\nfrom httptap.interfaces import TLSInspectorProtocol\n\nclass CustomTLSInspector:\n    \"\"\"Custom TLS inspector with extended certificate checks.\"\"\"\n\n    def inspect(self, host: str, port: int, timeout: float):\n        # Custom TLS inspection logic\n        # Return: (version, cipher, cert_cn, days_left, duration_ms)\n        pass\n\nanalyzer = HTTPTapAnalyzer(tls_inspector=CustomTLSInspector())\n</code></pre>"},{"location":"usage/advanced/#programmatic-usage","title":"Programmatic Usage","text":"<p>Use httptap as a Python library for integration into your applications.</p>"},{"location":"usage/advanced/#basic-analysis","title":"Basic Analysis","text":"<pre><code>from httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\"https://httpbin.io\")\n\nfor step in steps:\n    print(f\"URL: {step.url}\")\n    print(f\"Status: {step.response.status}\")\n    print(f\"Total time: {step.timing.total_ms:.2f}ms\")\n</code></pre>"},{"location":"usage/advanced/#with-custom-headers","title":"With Custom Headers","text":"<pre><code>from httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\nheaders = {\n    \"Authorization\": \"Bearer token123\",\n    \"Accept\": \"application/json\"\n}\n\nsteps = analyzer.analyze_url(\n    \"https://httpbin.io/bearer\",\n    headers=headers\n)\n</code></pre>"},{"location":"usage/advanced/#following-redirects","title":"Following Redirects","text":"<pre><code>from httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\n    \"https://httpbin.io/redirect/3\",\n    follow_redirects=True\n)\n\nprint(f\"Total steps in redirect chain: {len(steps)}\")\n</code></pre>"},{"location":"usage/advanced/#custom-visualization","title":"Custom Visualization","text":"<p>Create your own visualization by implementing the <code>VisualizerProtocol</code>.</p> <pre><code>from httptap.interfaces import VisualizerProtocol\nfrom httptap.models import RequestStep\n\nclass CustomVisualizer:\n    \"\"\"Custom visualizer for request steps.\"\"\"\n\n    def render(self, steps: list[RequestStep], *, follow: bool = False):\n        for step in steps:\n            # Custom rendering logic\n            print(f\"Step {step.step_number}: {step.timing.total_ms}ms\")\n\n# Use custom visualizer\nfrom httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\"https://httpbin.io\")\n\nvisualizer = CustomVisualizer()\nvisualizer.render(steps)\n</code></pre>"},{"location":"usage/advanced/#custom-export-formats","title":"Custom Export Formats","text":"<p>Implement custom export formats beyond JSON.</p> <pre><code>from httptap.interfaces import ExporterProtocol\nfrom httptap.models import RequestStep\nimport csv\n\nclass CSVExporter:\n    \"\"\"Export request data to CSV format.\"\"\"\n\n    def export(self, steps: list[RequestStep], output_path: str):\n        with open(output_path, 'w', newline='') as f:\n            writer = csv.writer(f)\n            writer.writerow(['url', 'status', 'dns_ms', 'connect_ms',\n                           'tls_ms', 'ttfb_ms', 'total_ms'])\n\n            for step in steps:\n                writer.writerow([\n                    step.url,\n                    step.response.status,\n                    step.timing.dns_ms,\n                    step.timing.connect_ms,\n                    step.timing.tls_ms,\n                    step.timing.ttfb_ms,\n                    step.timing.total_ms\n                ])\n\n# Usage\nfrom httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\"https://httpbin.io\")\n\nexporter = CSVExporter()\nexporter.export(steps, \"output.csv\")\n</code></pre>"},{"location":"usage/advanced/#performance-monitoring","title":"Performance Monitoring","text":"<p>Use httptap for continuous performance monitoring.</p> <pre><code>import time\nfrom httptap import HTTPTapAnalyzer\n\ndef monitor_endpoint(url: str, interval: int = 60):\n    \"\"\"Monitor endpoint every interval seconds.\"\"\"\n    analyzer = HTTPTapAnalyzer()\n\n    while True:\n        steps = analyzer.analyze_url(url)\n        step = steps[0]\n\n        # Log metrics\n        print(f\"{time.strftime('%Y-%m-%d %H:%M:%S')} - \"\n              f\"TTFB: {step.timing.ttfb_ms:.2f}ms, \"\n              f\"Total: {step.timing.total_ms:.2f}ms, \"\n              f\"Status: {step.response.status}\")\n\n        time.sleep(interval)\n\n# Monitor API endpoint every minute\nmonitor_endpoint(\"https://httpbin.io/status/200\", interval=60)\n</code></pre>"},{"location":"usage/advanced/#batch-analysis","title":"Batch Analysis","text":"<p>Analyze multiple URLs concurrently.</p> <pre><code>from concurrent.futures import ThreadPoolExecutor\nfrom httptap import HTTPTapAnalyzer\n\ndef analyze_url(url: str):\n    \"\"\"Analyze a single URL.\"\"\"\n    analyzer = HTTPTapAnalyzer()\n    steps = analyzer.analyze_url(url)\n    return url, steps[0].timing.total_ms\n\n# List of URLs to analyze\nurls = [\n    \"https://httpbin.io\",\n    \"https://httpbin.io/delay/1\",\n    \"https://httpbin.io/gzip\"\n]\n\n# Analyze concurrently\nwith ThreadPoolExecutor(max_workers=5) as executor:\n    results = list(executor.map(analyze_url, urls))\n\n# Print results\nfor url, total_ms in results:\n    print(f\"{url}: {total_ms:.2f}ms\")\n</code></pre>"},{"location":"usage/advanced/#error-handling","title":"Error Handling","text":"<p>Handle errors gracefully when analyzing URLs.</p> <pre><code>from httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\n\ntry:\n    steps = analyzer.analyze_url(\"https://httpbin.io/status/500\")\nexcept Exception as e:\n    print(f\"Error analyzing URL: {e}\")\n    # Handle error appropriately\n</code></pre>"},{"location":"usage/advanced/#integration-with-testing-frameworks","title":"Integration with Testing Frameworks","text":"<p>Use httptap in your test suites to verify performance requirements.</p> <pre><code>import pytest\nfrom httptap import HTTPTapAnalyzer\n\ndef test_api_response_time():\n    \"\"\"Test that API responds within acceptable time.\"\"\"\n    analyzer = HTTPTapAnalyzer()\n    steps = analyzer.analyze_url(\"https://httpbin.io/delay/0\")\n\n    # Assert TTFB is under 500ms\n    assert steps[0].timing.ttfb_ms &lt; 500, \\\n        f\"TTFB too high: {steps[0].timing.ttfb_ms}ms\"\n\n    # Assert total time is under 1 second\n    assert steps[0].timing.total_ms &lt; 1000, \\\n        f\"Total time too high: {steps[0].timing.total_ms}ms\"\n\ndef test_tls_configuration():\n    \"\"\"Verify TLS configuration meets security standards.\"\"\"\n    analyzer = HTTPTapAnalyzer()\n    steps = analyzer.analyze_url(\"https://httpbin.io\")\n\n    # Assert TLS 1.2 or higher\n    assert steps[0].network.tls_version in [\"TLSv1.2\", \"TLSv1.3\"], \\\n        f\"Insecure TLS version: {steps[0].network.tls_version}\"\n\n    # Assert certificate is valid for at least 30 days\n    assert steps[0].network.cert_days_left &gt; 30, \\\n        f\"Certificate expiring soon: {steps[0].network.cert_days_left} days\"\n</code></pre>"},{"location":"usage/advanced/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<p>Configure httptap differently for various environments.</p> <pre><code>import os\nfrom httptap import HTTPTapAnalyzer\n\n# Environment-specific settings\nconfig = {\n    \"production\": {\n        \"timeout\": 30,\n        \"follow_redirects\": True\n    },\n    \"staging\": {\n        \"timeout\": 60,\n        \"follow_redirects\": True\n    },\n    \"development\": {\n        \"timeout\": 120,\n        \"follow_redirects\": False\n    }\n}\n\nenv = os.getenv(\"ENVIRONMENT\", \"development\")\nsettings = config[env]\n\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\n    \"https://httpbin.io/status/200\",\n    follow_redirects=settings[\"follow_redirects\"]\n)\n</code></pre>"},{"location":"usage/advanced/#debugging-tips","title":"Debugging Tips","text":""},{"location":"usage/advanced/#enable-detailed-logging","title":"Enable Detailed Logging","text":"<pre><code>import logging\n\n# Enable debug logging\nlogging.basicConfig(level=logging.DEBUG)\n\nfrom httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\"https://httpbin.io\")\n</code></pre>"},{"location":"usage/advanced/#inspect-raw-http-traffic","title":"Inspect Raw HTTP Traffic","text":"<pre><code>from httptap import HTTPTapAnalyzer\n\nanalyzer = HTTPTapAnalyzer()\nsteps = analyzer.analyze_url(\"https://httpbin.io\")\n\n# Inspect response headers\nstep = steps[0]\nprint(\"Response headers:\")\nfor key, value in step.response.headers.items():\n    print(f\"  {key}: {value}\")\n</code></pre>"},{"location":"usage/advanced/#whats-next","title":"What's Next?","text":"<ul> <li> <p> API Reference</p> <p>Detailed interface documentation</p> </li> <li> <p> Contributing Guide</p> <p>Extend httptap and contribute</p> </li> <li> <p> Release Process</p> <p>How releases work</p> </li> </ul>"},{"location":"usage/basic/","title":"Basic Usage","text":""},{"location":"usage/basic/#command-line-interface","title":"Command-Line Interface","text":"<p>The <code>httptap</code> command-line interface provides various options to customize your HTTP requests and output.</p>"},{"location":"usage/basic/#syntax","title":"Syntax","text":"<pre><code>httptap [OPTIONS] URL\n</code></pre>"},{"location":"usage/basic/#options","title":"Options","text":""},{"location":"usage/basic/#request-options","title":"Request Options","text":""},{"location":"usage/basic/#-h-header","title":"<code>-H, --header</code>","text":"<p>Add custom HTTP headers to the request. Can be used multiple times.</p> <pre><code>httptap -H \"Accept: application/json\" https://httpbin.io\n</code></pre> <pre><code>httptap \\\n  -H \"User-Agent: MyApp/1.0\" \\\n  -H \"Authorization: Bearer token123\" \\\n  https://httpbin.io/bearer\n</code></pre>"},{"location":"usage/basic/#-follow","title":"<code>--follow</code>","text":"<p>Follow HTTP redirects and show timing for each step in the chain.</p> <pre><code>httptap --follow https://httpbin.io/redirect/3\n</code></pre> <p>By default, httptap does not follow redirects and will stop at the first redirect response (3xx status code).</p>"},{"location":"usage/basic/#output-options","title":"Output Options","text":""},{"location":"usage/basic/#-compact","title":"<code>--compact</code>","text":"<p>Display results in a compact single-line format, suitable for logging.</p> <pre><code>httptap --compact https://httpbin.io\n</code></pre> <p>Output:</p> <pre><code>Step 1: dns=8.9ms connect=97.0ms tls=194.6ms ttfb=446.0ms total=447.3ms status=200 bytes=389\n</code></pre>"},{"location":"usage/basic/#-metrics-only","title":"<code>--metrics-only</code>","text":"<p>Output raw metrics without formatting, ideal for scripting and automation.</p> <pre><code>httptap --metrics-only https://httpbin.io\n</code></pre> <p>Output:</p> <pre><code>Step 1: dns=30.1 connect=97.3 tls=199.0 ttfb=472.2 total=476.0 status=200 bytes=389 ip=44.211.11.205 family=IPv4 tls_version=TLSv1.2\n</code></pre>"},{"location":"usage/basic/#-json-path","title":"<code>--json PATH</code>","text":"<p>Export full request data to a JSON file.</p> <pre><code>httptap --json report.json https://httpbin.io\n</code></pre> <p>The JSON file contains:</p> <ul> <li>Timing breakdown for all phases</li> <li>Network information (IP address, TLS details, certificate info)</li> <li>Response metadata (status, headers, body size)</li> <li>Complete redirect chain (when using <code>--follow</code>)</li> </ul>"},{"location":"usage/basic/#-version","title":"<code>--version</code>","text":"<p>Display the httptap version and Python runtime information.</p> <pre><code>httptap --version\n</code></pre>"},{"location":"usage/basic/#http-methods","title":"HTTP Methods","text":"<p>Currently, httptap issues GET requests only. This keeps the interface simple and avoids exposing sensitive request data in output.</p> <p>If you need to profile POST/PUT workloads, you can use the Python API to wrap httptap and override the request executor.</p>"},{"location":"usage/basic/#request-flow","title":"Request Flow","text":"<p>Every httptap request follows these phases:</p> <ol> <li>DNS Resolution - Domain name lookup</li> <li>TCP Connect - Establish TCP connection</li> <li>TLS Handshake - Negotiate secure connection (HTTPS only)</li> <li>Server Wait - Time between request sent and first response byte</li> <li>Body Transfer - Download response body</li> </ol>"},{"location":"usage/basic/#understanding-output","title":"Understanding Output","text":""},{"location":"usage/basic/#rich-mode-default","title":"Rich Mode (Default)","text":"<p>The default rich output displays a waterfall table with:</p> <ul> <li>Phase name and duration</li> <li>Visual progress bar</li> <li>Network details (IP, TLS version, certificate info)</li> <li>Response metadata (status, size, content-type)</li> </ul>"},{"location":"usage/basic/#timing-breakdown","title":"Timing Breakdown","text":"<ul> <li>DNS (ms) - Time to resolve domain to IP address</li> <li>Connect (ms) - Time to establish TCP connection</li> <li>TLS (ms) - Time for TLS handshake (HTTPS only)</li> <li>TTFB (ms) - Time to first byte (includes server processing)</li> <li>Transfer (ms) - Time to download response body</li> <li>Total (ms) - End-to-end request duration</li> </ul>"},{"location":"usage/basic/#network-information","title":"Network Information","text":"<ul> <li>IP Address - Resolved IP address and family (IPv4/IPv6)</li> <li>TLS Version - Protocol version (TLS 1.2, TLS 1.3)</li> <li>Cipher Suite - Negotiated cipher suite</li> <li>Certificate CN - Common Name from server certificate</li> <li>Certificate Expiry - Days until certificate expires</li> </ul>"},{"location":"usage/basic/#examples","title":"Examples","text":""},{"location":"usage/basic/#basic-health-check","title":"Basic Health Check","text":"<pre><code>httptap https://httpbin.io/status/200\n</code></pre>"},{"location":"usage/basic/#api-request-with-authentication","title":"API Request with Authentication","text":"<pre><code>httptap \\\n  -H \"Authorization: Bearer ${API_TOKEN}\" \\\n  -H \"Accept: application/json\" \\\n  https://httpbin.io/bearer\n</code></pre>"},{"location":"usage/basic/#follow-redirect-chain","title":"Follow Redirect Chain","text":"<pre><code>httptap --follow https://httpbin.io/redirect/3\n</code></pre>"},{"location":"usage/basic/#export-for-analysis","title":"Export for Analysis","text":"<pre><code>httptap --json analysis.json --follow https://httpbin.io/redirect/2\n</code></pre>"},{"location":"usage/basic/#log-to-file","title":"Log to File","text":"<pre><code>httptap --metrics-only https://httpbin.io/delay/1 &gt;&gt; api-latency.log\n</code></pre>"},{"location":"usage/basic/#whats-next","title":"What's Next?","text":"<ul> <li> <p> Output Formats</p> <p>Rich, compact, JSON, and metrics modes</p> </li> <li> <p> Advanced Features</p> <p>Custom components and programmatic usage</p> </li> <li> <p> API Reference</p> <p>Extend httptap with protocols</p> </li> </ul>"},{"location":"usage/output-formats/","title":"Output Formats","text":"<p>httptap supports multiple output formats to suit different use cases, from interactive troubleshooting to automated scripting.</p>"},{"location":"usage/output-formats/#rich-mode-default","title":"Rich Mode (Default)","text":"<p>The default output format uses the Rich library to display a beautiful waterfall table in your terminal.</p> <pre><code>httptap https://httpbin.io\n</code></pre>"},{"location":"usage/output-formats/#features","title":"Features","text":"<ul> <li>Colorized output with syntax highlighting</li> <li>Visual progress bars for timing phases</li> <li>Structured tables for easy reading</li> <li>Network details including IP, TLS version, and certificate info</li> <li>Response metadata showing status, headers, and body size</li> </ul>"},{"location":"usage/output-formats/#when-to-use","title":"When to Use","text":"<ul> <li>Interactive debugging sessions</li> <li>Visual inspection of request performance</li> <li>Presentation of timing data to stakeholders</li> </ul>"},{"location":"usage/output-formats/#compact-mode","title":"Compact Mode","text":"<p>Single-line output format ideal for logging and quick comparisons.</p> <pre><code>httptap --compact https://httpbin.io\n</code></pre>"},{"location":"usage/output-formats/#example-output","title":"Example Output","text":"<pre><code>Step 1: dns=8.9ms connect=97.0ms tls=194.6ms ttfb=446.0ms total=447.3ms status=200 bytes=389\n</code></pre>"},{"location":"usage/output-formats/#features_1","title":"Features","text":"<ul> <li>Single line per request step</li> <li>Human-readable timing values</li> <li>Essential metrics only</li> <li>Easy to grep and filter</li> </ul>"},{"location":"usage/output-formats/#when-to-use_1","title":"When to Use","text":"<ul> <li>Append to log files</li> <li>Quick performance comparisons</li> <li>CI/CD pipeline output</li> <li>Terminal-friendly summaries</li> </ul>"},{"location":"usage/output-formats/#metrics-only-mode","title":"Metrics-Only Mode","text":"<p>Raw metrics without formatting, optimized for parsing by other tools.</p> <pre><code>httptap --metrics-only https://httpbin.io\n</code></pre>"},{"location":"usage/output-formats/#example-output_1","title":"Example Output","text":"<pre><code>Step 1: dns=30.1 connect=97.3 tls=199.0 ttfb=472.2 total=476.0 status=200 bytes=389 ip=44.211.11.205 family=IPv4 tls_version=TLSv1.2\n</code></pre>"},{"location":"usage/output-formats/#features_2","title":"Features","text":"<ul> <li>Machine-parseable format</li> <li>Complete metrics including network details</li> <li>Consistent structure for easy extraction</li> <li>No colors or formatting characters</li> </ul>"},{"location":"usage/output-formats/#when-to-use_2","title":"When to Use","text":"<ul> <li>Scripting and automation</li> <li>Data collection for analysis</li> <li>Integration with monitoring tools</li> <li>Parsing with awk/grep/sed</li> </ul>"},{"location":"usage/output-formats/#parsing-examples","title":"Parsing Examples","text":"<pre><code># Extract TTFB values\nhttptap --metrics-only https://httpbin.io/delay/1 | grep -oP 'ttfb=\\K[0-9.]+'\n\n# Get all timing metrics\nhttptap --metrics-only https://httpbin.io/get | \\\n  awk '{for(i=1;i&lt;=NF;i++){if($i ~ /=/) print $i}}'\n</code></pre>"},{"location":"usage/output-formats/#json-export","title":"JSON Export","text":"<p>Full request data exported as structured JSON for comprehensive analysis.</p> <pre><code>httptap --json output.json https://httpbin.io\n</code></pre>"},{"location":"usage/output-formats/#json-structure","title":"JSON Structure","text":"<pre><code>{\n  \"initial_url\": \"https://httpbin.io\",\n  \"total_steps\": 1,\n  \"steps\": [\n    {\n      \"url\": \"https://httpbin.io\",\n      \"step_number\": 1,\n      \"timing\": {\n        \"dns_ms\": 8.947,\n        \"connect_ms\": 96.977,\n        \"tls_ms\": 194.566,\n        \"ttfb_ms\": 445.951,\n        \"total_ms\": 447.344,\n        \"wait_ms\": 145.461,\n        \"xfer_ms\": 1.392,\n        \"is_estimated\": false\n      },\n      \"network\": {\n        \"ip\": \"44.211.11.205\",\n        \"ip_family\": \"IPv4\",\n        \"tls_version\": \"TLSv1.2\",\n        \"tls_cipher\": \"ECDHE-RSA-AES128-GCM-SHA256\",\n        \"cert_cn\": \"httpbin.io\",\n        \"cert_days_left\": 143\n      },\n      \"response\": {\n        \"status\": 200,\n        \"bytes\": 389,\n        \"content_type\": \"application/json\",\n        \"server\": null,\n        \"date\": \"2025-10-23T19:20:36+00:00\",\n        \"location\": null,\n        \"headers\": {}\n      },\n      \"error\": null,\n      \"note\": null\n    }\n  ],\n  \"summary\": {\n    \"total_time_ms\": 447.344,\n    \"final_status\": 200,\n    \"final_url\": \"https://httpbin.io\",\n    \"final_bytes\": 389,\n    \"errors\": 0\n  }\n}\n</code></pre>"},{"location":"usage/output-formats/#features_3","title":"Features","text":"<ul> <li>Complete data export of all phases</li> <li>Structured format for easy parsing</li> <li>Redirect chain support with multiple steps</li> <li>Metadata preservation (headers, timestamps)</li> <li>Error information when requests fail</li> </ul>"},{"location":"usage/output-formats/#when-to-use_3","title":"When to Use","text":"<ul> <li>Post-processing analysis</li> <li>Integration with data pipelines</li> <li>Long-term performance tracking</li> <li>Detailed debugging sessions</li> <li>Sharing results with team members</li> </ul>"},{"location":"usage/output-formats/#processing-examples","title":"Processing Examples","text":"<p>Using <code>jq</code> to extract specific fields:</p> <pre><code># Get total time\njq '.summary.total_time_ms' output.json\n\n# Extract all TTFB values\njq '.steps[].timing.ttfb_ms' output.json\n\n# Get certificate expiration\njq '.steps[0].network.cert_days_left' output.json\n\n# Filter failed requests\njq 'select(.summary.errors &gt; 0)' output.json\n</code></pre>"},{"location":"usage/output-formats/#redirect-chains","title":"Redirect Chains","text":"<p>When using <code>--follow</code>, all output formats include data for each step in the redirect chain.</p>"},{"location":"usage/output-formats/#rich-mode","title":"Rich Mode","text":"<p>Shows a summary table with totals for the entire chain.</p> <pre><code>httptap --follow https://httpbin.io/redirect/3\n</code></pre>"},{"location":"usage/output-formats/#compact-mode_1","title":"Compact Mode","text":"<p>Outputs one line per redirect step.</p> <pre><code>httptap --follow --compact https://httpbin.io/redirect/3\n</code></pre> <p>Output:</p> <pre><code>Step 1: dns=8.9ms connect=97.0ms tls=194.6ms ttfb=446.0ms total=447.3ms status=302 bytes=0\nStep 2: dns=2.7ms connect=97.5ms tls=194.0ms ttfb=400.2ms total=400.6ms status=302 bytes=0\nStep 3: dns=2.6ms connect=97.4ms tls=197.3ms ttfb=403.2ms total=404.0ms status=200 bytes=389\n</code></pre>"},{"location":"usage/output-formats/#json-export_1","title":"JSON Export","text":"<p>Includes all steps in the <code>steps</code> array with complete timing and metadata.</p> <pre><code>httptap --follow --json redirect-chain.json https://httpbin.io/redirect/3\n</code></pre>"},{"location":"usage/output-formats/#combining-options","title":"Combining Options","text":"<p>Output format options can be combined with other flags:</p> <pre><code># Follow redirects with compact output\nhttptap --follow --compact https://httpbin.io/redirect/2\n\n# Export redirect chain to JSON with metrics display\nhttptap --follow --json chain.json --metrics-only https://bit.ly/example\n</code></pre> <p>Note</p> <p>When both <code>--json</code> and display modes (<code>--compact</code>, <code>--metrics-only</code>) are used together, the display mode shows on stdout while JSON is written to the file.</p>"},{"location":"usage/output-formats/#whats-next","title":"What's Next?","text":"<ul> <li> <p> Advanced Features</p> <p>Custom components, monitoring, batch analysis</p> </li> <li> <p> API Reference</p> <p>Programmatic usage and extensions</p> </li> </ul>"}]}